REM : **** This class hanldes all Api calls and contains all the Apis related code ****

namespace http
    REM : **** This method returns the timeout duration for any Api call ****
    function getPortConnectionTime() as integer
        return 30000 'time in seconds
    end function

    REM : **** This method initiates api call with GET request ****
    function apiCallWithGetRequest(apiUrl as string, headers as object) as object
        return invokeApiCall(apiUrl, "", headers, "")
    end function

    REM : **** This method initiates api call with POST request ****
    function apiCallWithPostRequest(apiUrl as string, params as string, headers as object) as object
        return invokeApiCall(apiUrl, params, headers, "")
    end function

    REM : **** This method initiates api call with PUT request ****
    function apiCallWithPutRequest(apiUrl as string, params as string, headers as object)
        return invokeApiCall(apiUrl, params, headers, "PUT")
    end function

    REM : **** This method initiates api call with DELETE request ****
    function apiCallWithDeleteRequest(apiUrl as string, params as string, headers as object)
        return invokeApiCall(apiUrl, params, headers, "DELETE")
    end function


    REM : **** This method initiates api call ****
    function invokeApiCall(apiUrl as string, params as string, headers as object, apiRequestType as string)

        request = getRequest(apiUrl, headers, apiRequestType)

        if utils.checkInternetConection()
            if(params <> "" or apiRequestType = "PUT")
                requestType = request.AsyncPostFromString(params)
            else
                requestType = request.AsyncGetToString()
            end if

            timer = createobject("roTimeSpan")
            timer.Mark()

            if (requestType)
                while (true)
                    msg = wait(getPortConnectionTime(), m.port)

                    if (type(msg) = "roUrlEvent")
                        code = msg.GetResponseCode()
                        responseString = msg.GetString()

                        if (code = 200)
                            if responseString <> invalid
                                jsonObj = ParseJSON(responseString)
                                if jsonObj <> invalid
                                    return jsonObj
                                else
                                    return { "errMsg" : "Error" }
                                end if
                            else
                                return { "errMsg" : "Error" }
                            end if
                        else
                            if responseString <> invalid
                                jsonObj = ParseJSON(responseString)
                                if jsonObj <> invalid
                                    return { "errMsg" : "Error", "errorDetails" : jsonObj }
                                end if
                            end if
                            return { "errMsg" : "Error" }
                        end if
                    else
                        request.AsyncCancel()
                        return { "errMsg" : "Error" }
                    end if
                end while
            end if
        else
            return { "errMsg" : "Error" }
        end if
    end function

    REM : **** This method generates Request for Api call ****
    function getRequest(apiUrl as string, headers as object, requestType as string) as object
        request = CreateObject("roUrlTransfer")
        m.port = CreateObject("roMessagePort")
        request.SetMessagePort(m.port)
        request.EnableEncodings(true)
        request.SetUrl(apiUrl)
        request.SetCertificatesFile("common:/certs/ca-bundle.crt")
        request.AddHeader("Content-type", "application/json")

        if requestType.len() <> 0
            request.SetRequest(requestType)
        end if

        if type(headers) = "roAssociativeArray"
            For Each key in headers
                request.AddHeader(key, headers[key])
            end for
        end if

        request.InitClientCertificates()
        request.RetainBodyOnError(true)

        return request
    end function
end namespace