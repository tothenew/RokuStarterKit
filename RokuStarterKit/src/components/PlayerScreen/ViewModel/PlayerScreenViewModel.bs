' ----------------------------------------------------------------
REM : All the business logic for Player Screen has been written here
' ----------------------------------------------------------------

class PlayerViewModel
    public playerError as boolean

    sub new()
    end sub

    function playerStateChanged(state as string)
        if state = "error"
            playerError = true
        else if state = "finished"
            goBackToHomeScreen()
            playerError = false
        else
            playerError = false
        end if
    end function

    ' ----------------------------------------------------------------
    REM : This method gets called when OK button is tapped from UI Alert Pop Up at Player Screen
    ' ----------------------------------------------------------------
    sub onAlertOkButtonTapped()
        goBackToHomeScreen()
    end sub

    ' ----------------------------------------------------------------
    REM : This method identifies the stram format and returns the same
    ' ----------------------------------------------------------------
    function getStreamFormat(videoData) as string
        streamFormat = ""
        if videoData.format <> invalid and videoData.format.Len() <> 0
            streamFormat = videoData.format
        else
            if videoData.streamURL.InStr(".mp4") <> -1
                if videoData.streamURL.InStr(".m3u8") <> -1
                    streamFormat = "hls"
                else
                    streamFormat = "mp4"
                end if
            else if videoData.streamURL.InStr("mpd") <> -1
                streamFormat = "dash"
            end if
        end if
        return streamFormat
    end function

    ' ----------------------------------------------------------------
    REM : This method creates data for video
    ' ----------------------------------------------------------------
    function getVideoData(videoScreenData) as object
        videoUrl = videoScreenData.streamURL
        videoStreamFormat = m.getStreamFormat(videoScreenData)

        drmParams = {}
        if videoScreenData.licenseURL <> invalid and videoScreenData.licenseURL.Len() <> 0
            drmParams = {
                keySystem : "widevine"
                licenseServerURL : videoScreenData.licenseURL
            }
        end if

        videoContentData = {
            streamFormat : videoStreamFormat,
            titleSeason : "Art21 Season 3",
            title : "Place",
            url : videoUrl,

            'used for raf.setContentGenre(). For ads provided by the Roku ad service, see docs on 'Roku Genre Tags'
            categories : ["Documentary"]

            'Roku mandates that all channels enable Nielsen DAR
            nielsen_app_id : "P2871BBFF-1A28-44AA-AF68-C7DE4B148C32" 'required, put "P2871BBFF-1A28-44AA-AF68-C7DE4B148C32", Roku's default appId if not having ID from Nielsen
            nielsen_genre : "DO" 'required, put "GV" if dynamic genre or special circumstances (e.g. games)
            nielsen_program_id : "Art21" 'movie title or series name
            length : 3220 'in seconds;
            AdaptiveMaxStartBitrate : 564000
            AdaptiveMinStartBitrate : 16000
            drmParams : drmParams
        }
        return videoContentData
    end function
end class